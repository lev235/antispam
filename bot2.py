import os
import logging
import re
from datetime import datetime, timedelta
from aiohttp import web
from telegram import Update, ChatMember
from telegram.ext import (
    ApplicationBuilder, MessageHandler, ContextTypes, filters, Application
)

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s",
    level=logging.INFO
)

BAD_WORDS = {
    '—Ö—É–π', '—Öy–π', '—Ö—É–∏', '—Ö—É—è', '—Ö—É–µ', '—Ö—É—ë', '—Ö—É–∏ÃÜ', '—Ö—É–µ–º', '—Ö—É–µ–≤', '—Ö—É—ë–≤',
    '–ø–∏–∑–¥–∞', '–ø–∏–∑–¥–µ—Ü', '–ø–∏–∑–¥—É', '–ø–∏–∑–¥', '–ø–µ–∑–¥', '–ø–∏–∑–¥—é–∫',
    '–µ–±–∞—Ç—å', '–µ–±–∞–Ω', '—ë–±', '–µ–±–ª–æ', '–µ–±–ª–∞–Ω', '–µ–±—É', '–µ–±–∏—Å—å', '–µ–±–∞—á', '–µ–±–ª—è',
    '–º–∞–Ω–¥–∞', '–º—É–¥–∏–ª–∞', '–º—É–¥–ª–æ', '–º—É–¥–∞–∫', '–¥–æ–ª–±–æ–µ–±', '–¥–æ–ª–±–∞–µ–±',
    '—Å—É–∫–∞', '—Å—É–∫–æ', '—Å—É–∫–∏', '—Å—É–∫–∏–Ω', '–±–ª—è–¥—å', '–±–ª—è', '–±–ª—è–¥', '–±–ª—è—Ç', '–±–ª—è–¥–∏–Ω–∞',
    'fuck', 'shit', 'asshole', 'fucking', 'bitch', 'bastard', 'nigger', 'faggot'
}

AD_KEYWORDS = {
    '—Ä–∞–±–æ—Ç–∞', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '1400‚ÇΩ', '—É–¥–∞–ª—ë–Ω–Ω–æ', '–¥–µ–Ω—å–≥–∏',
    '–ª—ë–≥–∫–∏–µ –∑–∞–¥–∞—á–∏', '–ø–æ–¥–ø–∏—à–∏—Å—å', '–ø–∏—à–∏ –≤ –ª—Å', '@', 't.me/', '–∫–ª–∏–µ–Ω—Ç—ã'
}

def build_bad_word_patterns(words: set) -> list:
    patterns = []
    for word in words:
        spaced = r'\W{0,2}'.join(re.escape(c) for c in word)
        patterns.append(re.compile(spaced, re.IGNORECASE))
    return patterns

BAD_WORD_PATTERNS = build_bad_word_patterns(BAD_WORDS)

def contains_profanity(text: str) -> bool:
    for pattern in BAD_WORD_PATTERNS:
        if pattern.search(text):
            return True
    return False

def is_emoji_spam(text: str) -> bool:
    emoji_pattern = r'[\U0001F300-\U0001FAFF]'
    emojis = re.findall(emoji_pattern, text)
    if len(emojis) >= 10:
        return True
    if re.search(r'(.)\1{4,}', text):
        return True
    return False

def contains_ads(text: str) -> bool:
    lower_text = text.lower()
    return any(word in lower_text for word in AD_KEYWORDS)

FLOOD_LIMIT = 3
FLOOD_INTERVAL = 10

def is_flooding(user_id: int, chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    now = datetime.now()
    key = f"flood:{chat_id}:{user_id}"
    history = context.chat_data.get(key, [])
    history = [t for t in history if now - t < timedelta(seconds=FLOOD_INTERVAL)]
    history.append(now)
    context.chat_data[key] = history
    return len(history) >= FLOOD_LIMIT

async def is_admin(chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        return member.status in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞: {e}")
        return False

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message or not message.from_user:
        return

    user_id = message.from_user.id
    chat_id = message.chat.id
    text = message.text or message.caption or ""

    if await is_admin(chat_id, user_id, context):
        return

    try:
        if contains_profanity(text):
            await message.delete()
            logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} (–º–∞—Ç)")
            return

        if contains_ads(text):
            await message.delete()
            logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} (—Ä–µ–∫–ª–∞–º–∞)")
            return

        if is_emoji_spam(text):
            await message.delete()
            logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} (—ç–º–æ–¥–∑–∏-—Å–ø–∞–º)")
            return

        has_media = message.photo or message.video or message.document or message.animation

        if has_media and not text.strip():
            await message.delete()
            logging.info(f"–£–¥–∞–ª–µ–Ω–æ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)")
            return

    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

    if is_flooding(user_id, chat_id, context):
        try:
            await context.bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
            await context.bot.send_message(chat_id, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or user_id} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ —Ñ–ª—É–¥.")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ —Ñ–ª—É–¥")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# ------------------- AIOHTTP SERVER -------------------------

async def handle_webhook(request):
    app = request.app['bot_app']
    data = await request.json()
    update = Update.de_json(data, app.bot)
    await app.process_update(update)
    return web.Response(text='OK')

async def handle_ping(request):
    return web.Response(text='pong')

async def create_app():
    bot_token = os.getenv("BOT_TOKEN")
    webhook_url = os.getenv("WEBHOOK_URL")

    if not bot_token:
        raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    if not webhook_url:
        raise RuntimeError("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    # –°–æ–∑–¥–∞—ë–º Telegram Application –≤—Ä—É—á–Ω—É—é
    telegram_app: Application = ApplicationBuilder().token(bot_token).build()
    telegram_app.add_handler(MessageHandler(filters.ALL, handle_message))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∏–Ω–∞—á–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è)
    await telegram_app.initialize()
    await telegram_app.start()
    await telegram_app.bot.set_webhook(webhook_url)

    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

    app = web.Application()
    app['bot_app'] = telegram_app
    app.router.add_post("/", handle_webhook)
    app.router.add_get('/ping', handle_ping)

    return app

if __name__ == "__main__":
    port = int(os.getenv("PORT", "8080"))
    logging.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    web.run_app(create_app(), port=port)