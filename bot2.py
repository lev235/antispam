import logging
import re
from datetime import datetime, timedelta
from telegram import Update, ChatMember
from telegram.ext import (
    ApplicationBuilder, MessageHandler, ContextTypes, filters
)

# --- –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s",
    level=logging.INFO
)

# --- –ú–∞—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ ---
BAD_WORDS = {
    '—Ö—É–π', '—Öy–π', '—Ö—É–∏', '—Ö—É—è', '—Ö—É–µ', '—Ö—É—ë', '—Ö—É–∏ÃÜ', '—Ö—É–µ–º', '—Ö—É–µ–≤', '—Ö—É—ë–≤',
    '–ø–∏–∑–¥–∞', '–ø–∏–∑–¥–µ—Ü', '–ø–∏–∑–¥—É', '–ø–∏–∑–¥', '–ø–µ–∑–¥', '–ø–∏–∑–¥—é–∫',
    '–µ–±–∞—Ç—å', '–µ–±–∞–Ω', '—ë–±', '–µ–±–ª–æ', '–µ–±–ª–∞–Ω', '–µ–±—É', '–µ–±–∏—Å—å', '–µ–±–∞—á', '–µ–±–ª—è',
    '–º–∞–Ω–¥–∞', '–º—É–¥–∏–ª–∞', '–º—É–¥–ª–æ', '–º—É–¥–∞–∫', '–¥–æ–ª–±–æ–µ–±', '–¥–æ–ª–±–∞–µ–±',
    '—Å—É–∫–∞', '—Å—É–∫–æ', '—Å—É–∫–∏', '—Å—É–∫–∏–Ω', '–±–ª—è–¥—å', '–±–ª—è', '–±–ª—è–¥', '–±–ª—è—Ç', '–±–ª—è–¥–∏–Ω–∞',
    'fuck', 'shit', 'asshole', 'fucking', 'bitch', 'bastard', 'nigger', 'faggot',
    "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–∑–∞—Ä–∞–±–æ—Ç–∫–æ–º", "–∑–∞—Ä–æ–±–æ—Ç–∫–∞", "–∑–∞—Ä–∞–∞–±–æ—Ç–∫–∏", 
}

def build_bad_word_patterns(words: set) -> list:
    patterns = []
    for word in words:
        spaced = r'\W{0,2}'.join(re.escape(c) for c in word)
        patterns.append(re.compile(spaced, re.IGNORECASE))
    return patterns

BAD_WORD_PATTERNS = build_bad_word_patterns(BAD_WORDS)

# --- –†–µ–∫–ª–∞–º–Ω—ã–µ —Å–ª–æ–≤–∞ ---
AD_KEYWORDS = {
    '—Ä–∞–±–æ—Ç–∞', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '—É–¥–∞–ª—ë–Ω–Ω–æ', '–¥–µ–Ω—å–≥–∏', '1400‚ÇΩ', '–≤ –ª—Å', '–≤ –ª–∏—á–Ω—ã–µ',
    '–ø–∏—à–∏—Ç–µ', '–ø–æ–¥–ø–∏—à–∏—Å—å', '–≤ —Ç–µ–ª–µ–≥—Ä–∞–º', '–≤ telegram', '–≤ tg', 'whatsapp',
    '–Ω–æ–º–µ—Ä', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞', '–ø—Ä–∞–≤–∞', '@', 't.me/', '+7', '8-9'
}

def contains_profanity(text: str) -> bool:
    for pattern in BAD_WORD_PATTERNS:
        if pattern.search(text):
            return True
    return False

def is_emoji_spam(text: str) -> bool:
    emoji_pattern = r'[\U0001F300-\U0001FAFF]'
    emojis = re.findall(emoji_pattern, text)
    if len(emojis) >= 10:
        return True
    if re.search(r'(.)\1{4,}', text):
        return True
    return False

def contains_ads(text: str) -> bool:
    lower_text = text.lower()
    return any(word in lower_text for word in AD_KEYWORDS)

def filename_contains_ads(message) -> bool:
    doc = message.document
    if not doc or not doc.file_name:
        return False
    lower_name = doc.file_name.lower()
    return any(word in lower_name for word in AD_KEYWORDS)

# --- –ê–Ω—Ç–∏—Ñ–ª—É–¥ ---
FLOOD_LIMIT = 3
FLOOD_INTERVAL = 10  # —Å–µ–∫—É–Ω–¥

def is_flooding(user_id: int, chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    now = datetime.now()
    key = f"flood:{chat_id}:{user_id}"
    history = context.chat_data.get(key, [])
    history = [t for t in history if now - t < timedelta(seconds=FLOOD_INTERVAL)]
    history.append(now)
    context.chat_data[key] = history
    return len(history) >= FLOOD_LIMIT

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º ---
async def is_admin(chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        return member.status in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∞: {e}")
        return False

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message or not message.from_user:
        return

    user_id = message.from_user.id
    chat_id = message.chat.id
    text = message.text or message.caption or ""
    has_media = message.photo or message.video or message.document or message.animation

    if await is_admin(chat_id, user_id, context):
        return

    try:
        if contains_profanity(text) or contains_ads(text) or is_emoji_spam(text):
            await message.delete()
            logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} (—Ç–µ–∫—Å—Ç)")
            return

        if has_media and not text.strip():
            if filename_contains_ads(message):
                await message.delete()
                logging.info(f"–£–¥–∞–ª–µ–Ω–æ –º–µ–¥–∏–∞ –æ—Ç {user_id} (–∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä–µ–∫–ª–∞–º–æ–π)")
                return

            await message.delete()
            logging.info(f"–£–¥–∞–ª–µ–Ω–æ –º–µ–¥–∏–∞ –æ—Ç {user_id} –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            return

        if has_media and contains_ads(text):
            await message.delete()
            logging.info(f"–£–¥–∞–ª–µ–Ω–æ –º–µ–¥–∏–∞ –æ—Ç {user_id} (caption —Å —Ä–µ–∫–ª–∞–º–æ–π)")
            return

    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

    # –ê–Ω—Ç–∏—Ñ–ª—É–¥
    if is_flooding(user_id, chat_id, context):
        try:
            await context.bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
            await context.bot.send_message(chat_id, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or user_id} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ —Ñ–ª—É–¥.")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ —Ñ–ª—É–¥")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    BOT_TOKEN = "7871463826:AAHQyxV0BtGtieuqNUHtSUb60A5vWU6HKWk"

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.ALL, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()