import os
import re
import logging
import asyncio
from datetime import datetime, timedelta
from aiohttp import web
from telegram import Update, ChatMember
from telegram.ext import (
    ApplicationBuilder, MessageHandler, ContextTypes, filters
)

from PIL import Image
import pytesseract
import aiohttp
from io import BytesIO

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s",
    level=logging.INFO
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("‚ùå –£–∫–∞–∂–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

# --- –ù–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –∏ —Ä–µ–∫–ª–∞–º–∞ ---
BAD_WORDS = {
    '—Ö—É–π', '–ø–∏–∑–¥–∞', '–µ–±–∞—Ç—å', '–º–∞–Ω–¥–∞', '—Å—É–∫–∞', '–±–ª—è–¥—å', '–º—É–¥–∏–ª–∞',
    '—Ö—É–µ—Å–æ—Å', '–µ–±–ª–∞–Ω', '—Å–æ—Å–∏', '–ø–∏–¥–æ—Ä', '–∑–∞–ª—É–ø–∞', '—à–ª—é—Ö–∞', '–≥–∞–Ω–¥–æ–Ω',
    "–ø–∏—à–∏", "–ø–∏—à–∏—Ç–µ", "–≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", "–ø–∏—Å–∞—Ç—å", "–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å",
    "–∑–∞—Ä–∞–±–æ—Ç–∫–æ–º", "–∑–∞—Ä–∞–±–æ—Ç–∫–∏", "–∑–∞—Ä–∞–±–æ—Ç–∞–π", "–±—é–¥–∂–µ—Ç", "–ø–ª–∞—á—É", "–ø–ª–∞—Ç–∏–º"
}
AD_KEYWORDS = {'—Ä–∞–±–æ—Ç–∞', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–¥–µ–Ω—å–≥–∏', '@', 't.me/', '+7', '8-9', "https://"}

def build_bad_patterns(words):
    return [re.compile(r'\W{0,3}'.join(re.escape(c) for c in word), re.IGNORECASE) for word in words]

BAD_PATTERNS = build_bad_patterns(BAD_WORDS)
FLOOD_LIMIT = 3
FLOOD_INTERVAL = 10  # —Å–µ–∫

def contains_profanity(text):
    return any(p.search(text) for p in BAD_PATTERNS)

def contains_ads(text):
    return any(word in text.lower() for word in AD_KEYWORDS)

def contains_money(text):
    return bool(re.search(r'\b\d{2,}\s?(—Ä|—Ä—É–±|—Ä—É–±–ª–µ–π)\b', text.lower()))

def is_emoji_spam(text):
    return len(re.findall(r'[\U0001F300-\U0001FAFF]', text)) > 10

def is_flooding(user_id, chat_id, context):
    now = datetime.now()
    key = f"flood:{chat_id}:{user_id}"
    history = [t for t in context.chat_data.get(key, []) if now - t < timedelta(seconds=FLOOD_INTERVAL)]
    history.append(now)
    context.chat_data[key] = history
    return len(history) >= FLOOD_LIMIT

async def is_admin(chat_id, user_id, context):
    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        return member.status in [ChatMember.ADMINISTRATOR, ChatMember.OWNER]
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∞: {e}")
        return False

async def extract_text_from_image(file_url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as resp:
                if resp.status == 200:
                    img_bytes = await resp.read()
                    image = Image.open(BytesIO(img_bytes))
                    return pytesseract.image_to_string(image, lang='rus+eng')
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return ""

async def handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.from_user:
        return

    chat_id = msg.chat.id
    user_id = msg.from_user.id
    text = msg.text or msg.caption or ""

    if await is_admin(chat_id, user_id, context):
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∏
        if contains_profanity(text) or contains_ads(text) or contains_money(text) or is_emoji_spam(text):
            await msg.delete()
            logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} (–ø–æ —Ç–µ–∫—Å—Ç—É)")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        if msg.photo:
            file = await context.bot.get_file(msg.photo[-1].file_id)
            img_text = await extract_text_from_image(file.file_path)
            if contains_profanity(img_text) or contains_ads(img_text) or contains_money(img_text):
                await msg.delete()
                logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {user_id} (–ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é)")
                return
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    if is_flooding(user_id, chat_id, context):
        try:
            await context.bot.ban_chat_member(chat_id, user_id)
            await context.bot.send_message(chat_id, f"üö´ @{msg.from_user.username or user_id} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ —Ñ–ª—É–¥.")
            logging.info(f"–ó–∞–±–∞–Ω–µ–Ω {user_id}")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {e}")

# --- aiohttp —Å–µ—Ä–≤–µ—Ä ---
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.ALL, handle))

    async def handle_ping(request):
        return web.Response(text="OK")

    async def handle_webhook(request):
        data = await request.json()
        update = Update.de_json(data, app.bot)
        await app.update_queue.put(update)
        return web.Response(text="ok")

    aio_app = web.Application()
    aio_app.add_routes([
        web.post(f"/{BOT_TOKEN}", handle_webhook),
        web.get("/", handle_ping),
        web.get("/ping", handle_ping)
    ])

    runner = web.AppRunner(aio_app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.environ.get("PORT", 10000)))
    await site.start()

    logging.info("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == "__main__":
    asyncio.run(main())